// Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/*
This file is autogenerated from the following antlr grammar:
https://github.com/EstellaPaula/RegexEngine-ANTLR-parser/blob/master/ReGex.g4

A small edit: Adding another CHAR alternative 'a' to make simple regular
expressions that match with the simple test strings more likely.

Note that the expressions obtained from this grammar are neither complete (e.g.
no (?:) parens and various other things) nor correct (e.g. invalid range order
like [c-a] or **), but we'll see enough valid expressions for effective
fuzzing.

To regenerate this file, you need fuzztest:
https://github.com/google/fuzztest

Create a bazel BUILD file with a target for this grammar:
cc_fuzztest_grammar_library(
    name = "regex_grammar",
    srcs = ["RegEx.g4"],
    top_level_rule = "exp",
)

Build it and copy over the resulting file:
bazel build :regex_grammar
*/

#ifndef FUZZTEST_GRAMMARS_EXP_GRAMMAR_H_
#define FUZZTEST_GRAMMARS_EXP_GRAMMAR_H_

#include "./fuzztest/internal/domains/in_grammar_impl.h"

namespace fuzztest::internal::grammar::exp {

enum ExpTypes {
  kExpNode,
  kSETNode,
  kRANGENode,
  kSTARNode,
  kPLUSNode,
  kMAYBENode,
  kALTERNATIONNode,
  kANYNode,
  kNUMBERNode,
  kCHARNode,
  kWSNode,
  kExpSubNode0,
  kExpSubNode1,
  kExpSubNode2,
  kExpSubNode3,
  kExpSubNode4,
  kExpSubNode5,
  kExpSubNode6,
  kSETSubNode7,
  kSETSubNode8,
  kSETSubNode9,
  kSETSubNode10,
  kSETSubNode11,
  kSETSubNode12,
  kSETSubNode13,
  kSETSubNode14,
  kSETSubNode16,
  kSETSubNode15,
  kSETSubNode17,
  kRANGESubNode18,
  kRANGESubNode19,
  kRANGESubNode20,
  kRANGESubNode21,
  kNUMBERSubNode22,
  kCHARSubNode23,
  kWSSubNode24,
  kLiteral7,
  kLiteral8,
  kLiteral0,
  kLiteral1,
  kLiteral14,
  kLiteral11,
  kLiteral4,
  kLiteral5,
  kLiteral2,
  kLiteral9,
  kLiteral10,
  kLiteral6,
  kLiteral12,
  kLiteral3,
  kLiteral13,
  kCharSet2,
  kCharSet1,
  kCharSet0,
};
class ExpNode;
class SETNode;
class RANGENode;
class STARNode;
class PLUSNode;
class MAYBENode;
class ALTERNATIONNode;
class ANYNode;
class NUMBERNode;
class CHARNode;
class WSNode;
class ExpSubNode0;
class ExpSubNode1;
class ExpSubNode2;
class ExpSubNode3;
class ExpSubNode4;
class ExpSubNode5;
class ExpSubNode6;
class SETSubNode7;
class SETSubNode8;
class SETSubNode9;
class SETSubNode10;
class SETSubNode11;
class SETSubNode12;
class SETSubNode13;
class SETSubNode14;
class SETSubNode16;
class SETSubNode15;
class SETSubNode17;
class RANGESubNode18;
class RANGESubNode19;
class RANGESubNode20;
class RANGESubNode21;
class NUMBERSubNode22;
class CHARSubNode23;
class WSSubNode24;
class Literal7;
class Literal8;
class Literal0;
class Literal1;
class Literal14;
class Literal11;
class Literal4;
class Literal5;
class Literal2;
class Literal9;
class Literal10;
class Literal6;
class Literal12;
class Literal3;
class Literal13;
class CharSet2;
class CharSet1;
class CharSet0;

inline constexpr absl::string_view kStrLiteral7 = "(";
inline constexpr absl::string_view kStrLiteral8 = ")";
inline constexpr absl::string_view kStrLiteral0 = "*";
inline constexpr absl::string_view kStrLiteral1 = "+";
inline constexpr absl::string_view kStrLiteral14 = ",";
inline constexpr absl::string_view kStrLiteral11 = "-";
inline constexpr absl::string_view kStrLiteral4 = ".";
inline constexpr absl::string_view kStrLiteral5 = "0";
inline constexpr absl::string_view kStrLiteral2 = "?";
inline constexpr absl::string_view kStrLiteral9 = "[";
inline constexpr absl::string_view kStrLiteral10 = "]";
inline constexpr absl::string_view kStrLiteral6 = "a";
inline constexpr absl::string_view kStrLiteral12 = "{";
inline constexpr absl::string_view kStrLiteral3 = "|";
inline constexpr absl::string_view kStrLiteral13 = "}";
inline constexpr absl::string_view kStrCharSet2 = R"grammar([ \t\r\n])grammar";
inline constexpr absl::string_view kStrCharSet1 = R"grammar([0-9])grammar";
inline constexpr absl::string_view kStrCharSet0 =
    R"grammar([a-zA-Z0-9])grammar";

class ExpNode final
    : public VariantDomain<kExpNode, 0, CHARNode, ANYNode, NUMBERNode,
                           ExpSubNode0, ExpSubNode1, ExpSubNode2, ExpSubNode3,
                           ExpSubNode4, SETNode, RANGENode, ExpSubNode5,
                           ExpSubNode6> {};
class SETNode final
    : public VariantDomain<kSETNode, 0, SETSubNode7, SETSubNode8, SETSubNode10,
                           SETSubNode13, SETSubNode17> {};
class RANGENode final
    : public VariantDomain<kRANGENode, 0, RANGESubNode18, RANGESubNode19,
                           RANGESubNode20, RANGESubNode21> {};
class STARNode final : public TupleDomain<kSTARNode, Literal0> {};
class PLUSNode final : public TupleDomain<kPLUSNode, Literal1> {};
class MAYBENode final : public TupleDomain<kMAYBENode, Literal2> {};
class ALTERNATIONNode final : public TupleDomain<kALTERNATIONNode, Literal3> {};
class ANYNode final : public TupleDomain<kANYNode, Literal4> {};
class NUMBERNode final : public TupleDomain<kNUMBERNode, NUMBERSubNode22> {};
class CHARNode final : public VariantDomain<kCHARNode, 0, CharSet0,
                                            CHARSubNode23, Literal5, Literal6> {
};
class WSNode final : public TupleDomain<kWSNode, WSSubNode24> {};
class ExpSubNode0 final
    : public TupleDomain<kExpSubNode0, Literal7, ExpNode, Literal8, ExpNode> {};
class ExpSubNode1 final
    : public TupleDomain<kExpSubNode1, Literal7, ExpNode, Literal8> {};
class ExpSubNode2 final : public TupleDomain<kExpSubNode2, ExpNode, STARNode> {
};
class ExpSubNode3 final : public TupleDomain<kExpSubNode3, ExpNode, PLUSNode> {
};
class ExpSubNode4 final : public TupleDomain<kExpSubNode4, ExpNode, MAYBENode> {
};
class ExpSubNode5 final : public TupleDomain<kExpSubNode5, ExpNode, ExpNode> {};
class ExpSubNode6 final
    : public TupleDomain<kExpSubNode6, ExpNode, ALTERNATIONNode, ExpNode> {};
class SETSubNode7 final
    : public TupleDomain<kSETSubNode7, Literal9, CHARNode, Literal10> {};
class SETSubNode8 final : public TupleDomain<kSETSubNode8, Literal9, CHARNode,
                                             Literal11, CHARNode, Literal10> {};
class SETSubNode9 final : public NonEmptyVector<kSETSubNode9, CHARNode> {};
class SETSubNode10 final
    : public TupleDomain<kSETSubNode10, Literal9, SETSubNode9, Literal10> {};
class SETSubNode11 final : public NonEmptyVector<kSETSubNode11, SETSubNode12> {
};
class SETSubNode12 final
    : public TupleDomain<kSETSubNode12, CHARNode, Literal11, CHARNode> {};
class SETSubNode13 final
    : public TupleDomain<kSETSubNode13, Literal9, SETSubNode11, Literal10> {};
class SETSubNode14 final : public NonEmptyVector<kSETSubNode14, SETSubNode15> {
};
class SETSubNode16 final
    : public TupleDomain<kSETSubNode16, CHARNode, Literal11, CHARNode> {};
class SETSubNode15 final
    : public VariantDomain<kSETSubNode15, 0, CHARNode, SETSubNode16> {};
class SETSubNode17 final
    : public TupleDomain<kSETSubNode17, Literal9, SETSubNode14, Literal10> {};
class RANGESubNode18 final
    : public TupleDomain<kRANGESubNode18, CHARNode, Literal12, NUMBERNode,
                         Literal13> {};
class RANGESubNode19 final
    : public TupleDomain<kRANGESubNode19, CHARNode, Literal12, Literal14,
                         NUMBERNode, Literal13> {};
class RANGESubNode20 final
    : public TupleDomain<kRANGESubNode20, CHARNode, Literal12, NUMBERNode,
                         Literal14, Literal13> {};
class RANGESubNode21 final
    : public TupleDomain<kRANGESubNode21, CHARNode, Literal12, NUMBERNode,
                         Literal14, NUMBERNode, Literal13> {};
class NUMBERSubNode22 final
    : public NonEmptyVector<kNUMBERSubNode22, CharSet1> {};
class CHARSubNode23 final : public NonEmptyVector<kCHARSubNode23, CharSet1> {};
class WSSubNode24 final : public NonEmptyVector<kWSSubNode24, CharSet2> {};
class Literal7 final : public StringLiteralDomain<kLiteral7, kStrLiteral7> {};
class Literal8 final : public StringLiteralDomain<kLiteral8, kStrLiteral8> {};
class Literal0 final : public StringLiteralDomain<kLiteral0, kStrLiteral0> {};
class Literal1 final : public StringLiteralDomain<kLiteral1, kStrLiteral1> {};
class Literal14 final : public StringLiteralDomain<kLiteral14, kStrLiteral14> {
};
class Literal11 final : public StringLiteralDomain<kLiteral11, kStrLiteral11> {
};
class Literal4 final : public StringLiteralDomain<kLiteral4, kStrLiteral4> {};
class Literal5 final : public StringLiteralDomain<kLiteral5, kStrLiteral5> {};
class Literal2 final : public StringLiteralDomain<kLiteral2, kStrLiteral2> {};
class Literal9 final : public StringLiteralDomain<kLiteral9, kStrLiteral9> {};
class Literal10 final : public StringLiteralDomain<kLiteral10, kStrLiteral10> {
};
class Literal6 final : public StringLiteralDomain<kLiteral6, kStrLiteral6> {};
class Literal12 final : public StringLiteralDomain<kLiteral12, kStrLiteral12> {
};
class Literal3 final : public StringLiteralDomain<kLiteral3, kStrLiteral3> {};
class Literal13 final : public StringLiteralDomain<kLiteral13, kStrLiteral13> {
};
class CharSet2 final : public RegexLiteralDomain<kCharSet2, kStrCharSet2> {};
class CharSet1 final : public RegexLiteralDomain<kCharSet1, kStrCharSet1> {};
class CharSet0 final : public RegexLiteralDomain<kCharSet0, kStrCharSet0> {};
}  // namespace fuzztest::internal::grammar::exp
namespace fuzztest::internal_no_adl {

inline auto InExpGrammar() {
  return internal::grammar::InGrammarImpl<internal::grammar::exp::ExpNode>();
}

}  // namespace fuzztest::internal_no_adl
#endif  // FUZZTEST_GRAMMARS_EXP_GRAMMAR_H_
